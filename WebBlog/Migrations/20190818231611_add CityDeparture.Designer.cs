// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TouristApp.DAL.Entities;

namespace TouristApp.Migrations
{
    [DbContext(typeof(EFContext))]
    [Migration("20190818231611_add CityDeparture")]
    partial class addCityDeparture
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.Comments", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatingDate");

                    b.Property<string>("HotelId");

                    b.Property<string>("HotelsId");

                    b.Property<string>("Message");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("HotelsId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.Countries", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Russia"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Germany"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = "5",
                            Name = "USA"
                        },
                        new
                        {
                            Id = "6",
                            Name = "UK"
                        },
                        new
                        {
                            Id = "7",
                            Name = "Australia"
                        },
                        new
                        {
                            Id = "8",
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = "9",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = "10",
                            Name = "Canada"
                        },
                        new
                        {
                            Id = "11",
                            Name = "Chile"
                        },
                        new
                        {
                            Id = "12",
                            Name = "China"
                        },
                        new
                        {
                            Id = "13",
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = "14",
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = "15",
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = "16",
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = "17",
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = "18",
                            Name = "Finland"
                        },
                        new
                        {
                            Id = "19",
                            Name = "France"
                        },
                        new
                        {
                            Id = "20",
                            Name = "Greece"
                        },
                        new
                        {
                            Id = "21",
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = "22",
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = "23",
                            Name = "Israel"
                        },
                        new
                        {
                            Id = "24",
                            Name = "Italy"
                        },
                        new
                        {
                            Id = "25",
                            Name = "Japan"
                        },
                        new
                        {
                            Id = "26",
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = "27",
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = "28",
                            Name = "Moldova"
                        },
                        new
                        {
                            Id = "29",
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = "30",
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = "31",
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = "32",
                            Name = "Spain"
                        });
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.DbRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.DbUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AvatarUrl");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<DateTime>("SignUpTime");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.DbUserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.HotelImages", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HotelId");

                    b.Property<string>("HotelImageUrl");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelImages");
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.HotelParameters", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("HotelId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelParameters");
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.HotelSubParameters", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HotelParameterId");

                    b.Property<bool?>("IsFree");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("HotelParameterId");

                    b.ToTable("HotelSubParameters");
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.Hotels", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Class");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<decimal?>("Price");

                    b.Property<double?>("Rate");

                    b.Property<string>("RegionId");

                    b.Property<int?>("RoomsCount");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Class = 4,
                            Description = "Отель расположен в районе Хадаба курорта Шарм-Эль-Шейх на берегу Красного моря. Был открыт в 1996 году. Реновации в отеле не было, только косметический поточный ремонт. Состоит из основного 2-этажного здания (без номеров) и комплекса 2-этажных корпусов. Коралловый пляж отеля граничит с уникальными коралловыми рифами. Рядом возле отеля находится развлекательный центр Alf Leila Wa Leila, а торговые ряды Il Merkato и Old Market порадуют любителей шопинга и местного колорита. Отель расположен в 22 км от международного аэропорта Шарм-эль-Шейх в районе Hadaba | Ras Um El Sid. Расстояние до Naama Bay: 7 км; Расстояние до Old Market (Старый Город): 4 км; Расстояние до Soho Square: 20 км.",
                            Name = "Royal Paradise Resort",
                            Price = 550m,
                            Rate = 5.0,
                            RegionId = "1",
                            RoomsCount = 286
                        },
                        new
                        {
                            Id = "2",
                            Class = 3,
                            Description = "Отель находится в районе Рас Умм Элсид в Шарм-эль-Шейхе. В 8 км расположена набережная Наама-Бэй со множеством ресторанов и магазинов. Гостиница впервые распахнула свои двери гостям в 1999 году, последняя реновация проводилась в 2014 году. Отель подойдет для молодежного, романтического или индивидуального отдыха. В 18 км от аэропорта г. Шарм-эль-Шейх.",
                            Name = "Amar Sina",
                            Price = 572m,
                            Rate = 3.6099999999999999,
                            RegionId = "1",
                            RoomsCount = 98
                        },
                        new
                        {
                            Id = "3",
                            Class = 5,
                            Description = "Отель расположен в Хадабет Ом Эль Сид, в самом центре променада Эль Меркато, на курорте Шарм-эль-Шейх, рядом с побережьем Красного моря. Отель был открыт в 2010 году, последняя реновация проводилась в 2018 году (обновление мебели на территории отеля, обновление бассейнов и номеров категории Deluxe). Отель подойдет для семейного, романтического или молодежного отдыха. Отель расположен в 17 км от аэропорта города Шарм Эль Шейх.",
                            Name = "Il Mercato Hotel (ex.Iberotel Il Mercato)",
                            Price = 675m,
                            Rate = 4.5199999999999996,
                            RegionId = "1",
                            RoomsCount = 318
                        });
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.Orders", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TourId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.Regions", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CountryId = "16",
                            Name = "Шарм Эль Шейх"
                        },
                        new
                        {
                            Id = "2",
                            CountryId = "1",
                            Name = "Krakow"
                        },
                        new
                        {
                            Id = "3",
                            CountryId = "1",
                            Name = "Wroclaw"
                        });
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.Tours", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DaysCount");

                    b.Property<DateTime?>("FromData");

                    b.Property<string>("HotelId");

                    b.Property<decimal?>("Price");

                    b.Property<string>("СityDepartureId");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("СityDepartureId");

                    b.ToTable("Tours");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            DaysCount = 6,
                            FromData = new DateTime(2019, 8, 19, 2, 16, 10, 872, DateTimeKind.Local).AddTicks(259),
                            HotelId = "1",
                            Price = 3300m
                        },
                        new
                        {
                            Id = "2",
                            DaysCount = 8,
                            FromData = new DateTime(2019, 8, 19, 2, 16, 10, 872, DateTimeKind.Local).AddTicks(5324),
                            HotelId = "2",
                            Price = 4400m
                        },
                        new
                        {
                            Id = "3",
                            DaysCount = 10,
                            FromData = new DateTime(2019, 8, 19, 2, 16, 10, 872, DateTimeKind.Local).AddTicks(5329),
                            HotelId = "2",
                            Price = 5500m
                        });
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.СityDeparture", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("СityDeparture");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("TouristApp.DAL.Entities.DbRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TouristApp.DAL.Entities.DbUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TouristApp.DAL.Entities.DbUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TouristApp.DAL.Entities.DbUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.Comments", b =>
                {
                    b.HasOne("TouristApp.DAL.Entities.Hotels")
                        .WithMany("Comments")
                        .HasForeignKey("HotelsId");

                    b.HasOne("TouristApp.DAL.Entities.DbUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.DbUserRole", b =>
                {
                    b.HasOne("TouristApp.DAL.Entities.DbRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TouristApp.DAL.Entities.DbUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.HotelImages", b =>
                {
                    b.HasOne("TouristApp.DAL.Entities.Hotels", "Hotel")
                        .WithMany("HotelImages")
                        .HasForeignKey("HotelId");
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.HotelParameters", b =>
                {
                    b.HasOne("TouristApp.DAL.Entities.Hotels", "Hotel")
                        .WithMany("HotelParameters")
                        .HasForeignKey("HotelId");
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.HotelSubParameters", b =>
                {
                    b.HasOne("TouristApp.DAL.Entities.HotelParameters", "HotelParameter")
                        .WithMany("HotelSubParameters")
                        .HasForeignKey("HotelParameterId");
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.Hotels", b =>
                {
                    b.HasOne("TouristApp.DAL.Entities.Regions", "Region")
                        .WithMany("Hotels")
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.Orders", b =>
                {
                    b.HasOne("TouristApp.DAL.Entities.Tours", "Tour")
                        .WithMany("Orders")
                        .HasForeignKey("TourId");

                    b.HasOne("TouristApp.DAL.Entities.DbUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.Regions", b =>
                {
                    b.HasOne("TouristApp.DAL.Entities.Countries", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("TouristApp.DAL.Entities.Tours", b =>
                {
                    b.HasOne("TouristApp.DAL.Entities.Hotels", "Hotel")
                        .WithMany("Tours")
                        .HasForeignKey("HotelId");

                    b.HasOne("TouristApp.DAL.Entities.СityDeparture", "СityDeparture")
                        .WithMany()
                        .HasForeignKey("СityDepartureId");
                });
#pragma warning restore 612, 618
        }
    }
}
